name: 'Arturo Builder'
description: 'Setup Arturo environment'
branding:
    icon: terminal
    color: purple
inputs:
    mode:
        description: >-
            The Arturo version to install
            (one of: 'mini', 'full', 'web')
        default: 'full'
    token:
        description: >-
            The GITHUB_TOKEN secret.
        required: true
    arch:
        description: >-
            The architecture to build for.
            (one of: 'x86', 'arm', 'arm64', 'amd64', 'native')
        default: 'native'
runs:
    using: "composite"
    steps:
        - name: Clone Arturo repository
          run: |
            git clone https://github.com/arturo-lang/arturo.git
          shell: bash

        - name: Debugging
          run: |
            echo ${{ runner.os }}
            echo ${{ runner.arch }}
          shell: bash

        - name: Cache ChooseNim
          if: runner.os == 'Linux' || runner.os == 'macOS'
          id: cache-choosenim
          uses: actions/cache@v4
          with:
            path: ~/.choosenim
            key: ${{ runner.os }}-choosenim-${{ steps.get-date.outputs.date }}
  
        - name: Cache Nimble
          if: runner.os == 'Linux' || runner.os == 'macOS'
          id: cache-nimble
          uses: actions/cache@v4
          with:
            path: ~/.nimble
            key: ${{ runner.os }}-nimble-${{ hashFiles('*.nimble') }}

        - name: Setup Msys
          if: runner.os == 'Windows'
          uses: msys2/setup-msys2@v2
          with:
            update: true
            cache: true
            install: 'git base-devel p7zip mingw-w64-x86_64-toolchain'

        - name: Install Nim (Linux)
          if: runner.os == 'Linux'
          uses: jiro4989/setup-nim-action@v1
          with:
            nim-version: '2.0.4'
            repo-token: ${{ inputs.token }}

        - name: Install Nim (macOS)
          if: runner.os == 'macOS'
          run: |
            brew install nim
          shell: bash

        - name: Install Nim (Windows / mini)
          if: runner.os == 'Windows' && inputs.mode == 'mini'
          run: |
            mkdir dist
            mkdir nim
            curl -L https://nim-lang.org/download/dlls.zip -o dist/dlls.zip
            curl -L https://nim-lang.org/download/nim-2.0.4_x64.zip -o dist/nim.zip
            7z x dist/dlls.zip -obin
            7z x dist/nim.zip -onim

            export PATH="${{ github.workspace }}/nim/nim-2.0.4/bin":$PATH

            cd arturo
            ./build.nims build --mode ${{ inputs.mode }} --log
            cd ..
            cp bin/*.dll /usr/bin
            cp arturo/bin/arturo.exe /usr/bin
          shell: msys2 {0}

        - name: Install Nim (Windows / full)
          if: runner.os == 'Windows' && inputs.mode == 'full'
          run: |
            pacman --noconfirm -S mingw-w64-x86_64-mpfr
            mkdir dist
            mkdir nim
            curl -L https://nim-lang.org/download/dlls.zip -o dist/dlls.zip
            curl -L https://arturo-lang.s3.amazonaws.com/extra-dlls.zip -o dist/extradlls.zip
            curl -L https://nim-lang.org/download/nim-2.0.4_x64.zip -o dist/nim.zip
            7z x dist/dlls.zip -obin
            7z x dist/extradlls.zip -obin
            7z x dist/nim.zip -onim
            cp arturo/src/extras/webview/deps/dlls/x64/*.dll bin

            export PATH="${{ github.workspace }}/nim/nim-2.0.4/bin":$PATH

            cd arturo
            ./build.nims build --mode ${{ inputs.mode }} --log
            cd ..
            cp bin/*.dll /usr/bin
            cp arturo/bin/arturo.exe /usr/bin
            #curl -L https://curl.se/ca/cacert.pem -o /usr/bin/cacert.pem
            
          shell: msys2 {0}

        - name: Install dependencies (Linux / mini / x86)
          if: runner.os == 'Linux' && inputs.mode == 'mini' && inputs.arch == 'x86'
          run: |
            sudo apt-get update
            sudo apt-get install gcc-multilib g++-multilib
          shell: bash

        - name: Install dependencies (Linux / mini / arm)
          if: runner.os == 'Linux' && inputs.mode == 'mini' && (inputs.arch == 'arm' || inputs.arch == 'arm64')
          run: |
            sudo apt-get update
            sudo apt-get install gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu
          shell: bash

        - name: Install dependencies (Linux / full)
          if: runner.os == 'Linux' && inputs.mode != 'mini'
          run: |
            sudo apt-get update
            sudo apt-get install libgtk-3-dev libwebkit2gtk-4.0-dev libmpfr-dev
          shell: bash

        - name: Install dependencies (macOS / arm)
          if: runner.os == 'macOS' && runner.arch == 'ARM64' && inputs.mode != 'mini'
          run: |
            brew install pcre
          shell: bash
        
        - name: Compile Arturo (Linux/macOS - native)
          if: runner.os != 'Windows' && (inputs.arch == 'native' || inputs.arch == 'amd64') && runner.arch != 'ARM64'
          run: |
            cd arturo
            ./build.nims --install --mode ${{inputs.mode}} --arch amd64 --log
            echo "$HOME/.arturo/bin" >> $GITHUB_PATH
            cd ..
          shell: bash

        - name: Compile Arturo (macOS - M1)
          if: (inputs.arch == 'native' || inputs.arch == 'arm64') &&  (runner.os == 'macOS' && runner.arch == 'ARM64')
          run: |
            cd arturo
            ./build.nims --install --mode ${{inputs.mode}} --arch arm64 --log
            echo "$HOME/.arturo/bin" >> $GITHUB_PATH
            cd ..
          shell: bash

        - name: Compile Arturo (Linux)
          if: inputs.arch != 'native' && runner.os == 'Linux'
          run: |
            cd arturo
            ./build.nims --install --mode ${{inputs.mode}} --arch ${{inputs.arch}} --log
            echo "$HOME/.arturo/bin" >> $GITHUB_PATH
            cd ..
          shell: bash